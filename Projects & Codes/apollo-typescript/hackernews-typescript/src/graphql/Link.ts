// Objective : querying a feed of links that were posted by other users, implement 
// a feed query that allows you to retrieve an array of Link elements
import { extendType, nonNull, objectType, stringArg, intArg, scalarType } from "nexus";
import { NexusGenObjects } from "../../nexus-typegen";

// Defining Link type using objectType function from the nexus library
export const Link = objectType({
    name: "Link", // This name option defines the name of the type
    definition(t) { // Inside the definition, you can add different fields that get added to the type
        t.nonNull.int('id'); // Adds a field name id of type Int
        t.nonNull.string('description'); // Adds a field name description of type String
        t.nonNull.string('url'); // Adds a field name of url of type String
        t.field("postedBy", { // Adding a postedBy field of type User
            type: "User",
            resolve(parent, args, context) {
                return context.prisma.link
                    .findUnique({ where: { id: parent.id }})
                    .postedBy()
            }
        })
    },
}); // All the fields defined above are non-null

// This links variable is used to stored the links at runtime, for now everything is stored only
// in-memory rather than being persisted in a database
// Youâ€™re also using the Link interface generated by Nexus to define the type of the links 
// variable as an array of Link objects
// let links: NexusGenObjects["Link"][] = [ 
//     {
//         id: 1,
//         url: "www.howtographql.com",
//         description: "Fullstack tutorial for GraphQL",
//     },
//     {
//         id: 2,
//         url: "graphql.org",
//         description: "GraphQL official website",
//     },
// ];

// Extending the Query root type and adding a new root field to it called feed
export const LinkQuery = extendType({
    type: "Query",
    definition(t) {
        t.nonNull.list.nonNull.field("feed", { // Defines the return type of the feed query as a not nullable array of link type objects
            type: "Link",
            resolve(parent, args, context, info) { // The implementation for a GraphQL field
                                                   // Every field on each type (including the root types) has a 
                                                   // resolver function which is executed to get the return value 
                                                   // when fetching that type
                return context.prisma.link.findMany() // Find and return all the Link records in your database
                                                      // Using the PrismaClient instance available through context.prisma
            },
        });
    },
});

// Creating a mutation for adding new links
export const LinkMutation = extendType({ // extending the Mutation type to add a new root field called post
    type: "Mutation",
    definition(t) {
        t.nonNull.field("post", { // the name of the mutation is defined as post and it returns a link object
            type: "Link",
            args: { // here you define the arguments to your mutation, you pass arguments to your GraphQL API endpoints like in REST
                description: nonNull(stringArg()), // "description" argument, mandatory must be nonNull
                url: nonNull(stringArg()), // "url" argument, mandatory must be nonNull
            },
            resolve(parent, args, context) {
                const { description, url } = args;
                const { userId } = context;

                if (!userId) {  // 1
                    throw new Error("Cannot post without logging in.");
                }

                const newLink = context.prisma.link.create({
                    data: {
                        description,
                        url,
                        postedBy: { connect: { id: userId } },  // 2
                    },
                });

                return newLink;
            }
        })
    }
})

